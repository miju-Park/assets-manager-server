scalar DateTime

type Mutation {
  # post(url:String!, description:String!) : Link!
  signup(email:String!, password:String!, name:String!):AuthPayload
  login(email:String!, password:String!) :AuthPayload
	createAsset(
		type:String!, bank:String!, title:String!, 
		startdate:DateTime!, duedate:DateTime!, balance:Float,
		payment: Int, initialDeposit:Int, currency:Int,
		count:Int, ticker:String, averagePrice:Float):Assets!
  updateAsset(id:Int!, bank:String, title:String, 
		startdate:DateTime, duedate:DateTime, balance:Int, 
		currency:Int, initialDeposit:Int, payment:Int):Assets!
	deleteAsset(id:Int!):Boolean!
	deleteUser(id:Int!) :Boolean!
}
type Query {
  assets(filter:String): AssetsResult!
}

type AuthPayload {
  token:String
  user:User
}

type User{
  id: ID!
  name: String!
  email: String!
  assets: [Assets!]!
}


type Assets {
	id: ID!
	type: String!
	bank: String!
	title: String
	startdate: DateTime!
	duedate: DateTime!
	balance: Float
	payment: Int
	initialDeposit: Int
	currency: Int
	ticker: String
	count: Int
	currentPrice: Float
	averagePrice: Float
	owner: User
}

type AssetsResult {
	list: [Assets!]!
	total:Int!
	currency:Int
}

