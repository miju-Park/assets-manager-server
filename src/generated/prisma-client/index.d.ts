// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  assets: (where?: AssetsWhereInput) => Promise<boolean>;
  checkingAccount: (where?: CheckingAccountWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  assets: (where: AssetsWhereUniqueInput) => AssetsNullablePromise;
  assetses: (args?: {
    where?: AssetsWhereInput;
    orderBy?: AssetsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Assets>;
  assetsesConnection: (args?: {
    where?: AssetsWhereInput;
    orderBy?: AssetsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AssetsConnectionPromise;
  checkingAccount: (
    where: CheckingAccountWhereUniqueInput
  ) => CheckingAccountNullablePromise;
  checkingAccounts: (args?: {
    where?: CheckingAccountWhereInput;
    orderBy?: CheckingAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CheckingAccount>;
  checkingAccountsConnection: (args?: {
    where?: CheckingAccountWhereInput;
    orderBy?: CheckingAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CheckingAccountConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAssets: (data: AssetsCreateInput) => AssetsPromise;
  updateAssets: (args: {
    data: AssetsUpdateInput;
    where: AssetsWhereUniqueInput;
  }) => AssetsPromise;
  upsertAssets: (args: {
    where: AssetsWhereUniqueInput;
    create: AssetsCreateInput;
    update: AssetsUpdateInput;
  }) => AssetsPromise;
  deleteAssets: (where: AssetsWhereUniqueInput) => AssetsPromise;
  deleteManyAssetses: (where?: AssetsWhereInput) => BatchPayloadPromise;
  createCheckingAccount: (
    data: CheckingAccountCreateInput
  ) => CheckingAccountPromise;
  updateCheckingAccount: (args: {
    data: CheckingAccountUpdateInput;
    where: CheckingAccountWhereUniqueInput;
  }) => CheckingAccountPromise;
  updateManyCheckingAccounts: (args: {
    data: CheckingAccountUpdateManyMutationInput;
    where?: CheckingAccountWhereInput;
  }) => BatchPayloadPromise;
  upsertCheckingAccount: (args: {
    where: CheckingAccountWhereUniqueInput;
    create: CheckingAccountCreateInput;
    update: CheckingAccountUpdateInput;
  }) => CheckingAccountPromise;
  deleteCheckingAccount: (
    where: CheckingAccountWhereUniqueInput
  ) => CheckingAccountPromise;
  deleteManyCheckingAccounts: (
    where?: CheckingAccountWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  assets: (
    where?: AssetsSubscriptionWhereInput
  ) => AssetsSubscriptionPayloadSubscription;
  checkingAccount: (
    where?: CheckingAccountSubscriptionWhereInput
  ) => CheckingAccountSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Currency = "KR" | "USD";

export type CheckingAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "bank_ASC"
  | "bank_DESC"
  | "name_ASC"
  | "name_DESC"
  | "startdate_ASC"
  | "startdate_DESC"
  | "duedate_ASC"
  | "duedate_DESC"
  | "balance_ASC"
  | "balance_DESC"
  | "currency_ASC"
  | "currency_DESC";

export type AssetsOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AssetsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CheckingAccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  bank?: Maybe<String>;
  bank_not?: Maybe<String>;
  bank_in?: Maybe<String[] | String>;
  bank_not_in?: Maybe<String[] | String>;
  bank_lt?: Maybe<String>;
  bank_lte?: Maybe<String>;
  bank_gt?: Maybe<String>;
  bank_gte?: Maybe<String>;
  bank_contains?: Maybe<String>;
  bank_not_contains?: Maybe<String>;
  bank_starts_with?: Maybe<String>;
  bank_not_starts_with?: Maybe<String>;
  bank_ends_with?: Maybe<String>;
  bank_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  startdate?: Maybe<DateTimeInput>;
  startdate_not?: Maybe<DateTimeInput>;
  startdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startdate_lt?: Maybe<DateTimeInput>;
  startdate_lte?: Maybe<DateTimeInput>;
  startdate_gt?: Maybe<DateTimeInput>;
  startdate_gte?: Maybe<DateTimeInput>;
  duedate?: Maybe<DateTimeInput>;
  duedate_not?: Maybe<DateTimeInput>;
  duedate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  duedate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  duedate_lt?: Maybe<DateTimeInput>;
  duedate_lte?: Maybe<DateTimeInput>;
  duedate_gt?: Maybe<DateTimeInput>;
  duedate_gte?: Maybe<DateTimeInput>;
  balance?: Maybe<Int>;
  balance_not?: Maybe<Int>;
  balance_in?: Maybe<Int[] | Int>;
  balance_not_in?: Maybe<Int[] | Int>;
  balance_lt?: Maybe<Int>;
  balance_lte?: Maybe<Int>;
  balance_gt?: Maybe<Int>;
  balance_gte?: Maybe<Int>;
  currency?: Maybe<Currency>;
  currency_not?: Maybe<Currency>;
  currency_in?: Maybe<Currency[] | Currency>;
  currency_not_in?: Maybe<Currency[] | Currency>;
  AND?: Maybe<CheckingAccountWhereInput[] | CheckingAccountWhereInput>;
  OR?: Maybe<CheckingAccountWhereInput[] | CheckingAccountWhereInput>;
  NOT?: Maybe<CheckingAccountWhereInput[] | CheckingAccountWhereInput>;
}

export interface AssetsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  checkingAccount_every?: Maybe<CheckingAccountWhereInput>;
  checkingAccount_some?: Maybe<CheckingAccountWhereInput>;
  checkingAccount_none?: Maybe<CheckingAccountWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<AssetsWhereInput[] | AssetsWhereInput>;
  OR?: Maybe<AssetsWhereInput[] | AssetsWhereInput>;
  NOT?: Maybe<AssetsWhereInput[] | AssetsWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  assets_every?: Maybe<AssetsWhereInput>;
  assets_some?: Maybe<AssetsWhereInput>;
  assets_none?: Maybe<AssetsWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type CheckingAccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AssetsCreateInput {
  id?: Maybe<ID_Input>;
  checkingAccount?: Maybe<CheckingAccountCreateManyInput>;
  user: UserCreateOneWithoutAssetsInput;
}

export interface CheckingAccountCreateManyInput {
  create?: Maybe<CheckingAccountCreateInput[] | CheckingAccountCreateInput>;
  connect?: Maybe<
    CheckingAccountWhereUniqueInput[] | CheckingAccountWhereUniqueInput
  >;
}

export interface CheckingAccountCreateInput {
  id?: Maybe<ID_Input>;
  bank: String;
  name?: Maybe<String>;
  startdate: DateTimeInput;
  duedate: DateTimeInput;
  balance: Int;
  currency?: Maybe<Currency>;
}

export interface UserCreateOneWithoutAssetsInput {
  create?: Maybe<UserCreateWithoutAssetsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAssetsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
}

export interface AssetsUpdateInput {
  checkingAccount?: Maybe<CheckingAccountUpdateManyInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutAssetsInput>;
}

export interface CheckingAccountUpdateManyInput {
  create?: Maybe<CheckingAccountCreateInput[] | CheckingAccountCreateInput>;
  update?: Maybe<
    | CheckingAccountUpdateWithWhereUniqueNestedInput[]
    | CheckingAccountUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CheckingAccountUpsertWithWhereUniqueNestedInput[]
    | CheckingAccountUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    CheckingAccountWhereUniqueInput[] | CheckingAccountWhereUniqueInput
  >;
  connect?: Maybe<
    CheckingAccountWhereUniqueInput[] | CheckingAccountWhereUniqueInput
  >;
  set?: Maybe<
    CheckingAccountWhereUniqueInput[] | CheckingAccountWhereUniqueInput
  >;
  disconnect?: Maybe<
    CheckingAccountWhereUniqueInput[] | CheckingAccountWhereUniqueInput
  >;
  deleteMany?: Maybe<
    CheckingAccountScalarWhereInput[] | CheckingAccountScalarWhereInput
  >;
  updateMany?: Maybe<
    | CheckingAccountUpdateManyWithWhereNestedInput[]
    | CheckingAccountUpdateManyWithWhereNestedInput
  >;
}

export interface CheckingAccountUpdateWithWhereUniqueNestedInput {
  where: CheckingAccountWhereUniqueInput;
  data: CheckingAccountUpdateDataInput;
}

export interface CheckingAccountUpdateDataInput {
  bank?: Maybe<String>;
  name?: Maybe<String>;
  startdate?: Maybe<DateTimeInput>;
  duedate?: Maybe<DateTimeInput>;
  balance?: Maybe<Int>;
  currency?: Maybe<Currency>;
}

export interface CheckingAccountUpsertWithWhereUniqueNestedInput {
  where: CheckingAccountWhereUniqueInput;
  update: CheckingAccountUpdateDataInput;
  create: CheckingAccountCreateInput;
}

export interface CheckingAccountScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  bank?: Maybe<String>;
  bank_not?: Maybe<String>;
  bank_in?: Maybe<String[] | String>;
  bank_not_in?: Maybe<String[] | String>;
  bank_lt?: Maybe<String>;
  bank_lte?: Maybe<String>;
  bank_gt?: Maybe<String>;
  bank_gte?: Maybe<String>;
  bank_contains?: Maybe<String>;
  bank_not_contains?: Maybe<String>;
  bank_starts_with?: Maybe<String>;
  bank_not_starts_with?: Maybe<String>;
  bank_ends_with?: Maybe<String>;
  bank_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  startdate?: Maybe<DateTimeInput>;
  startdate_not?: Maybe<DateTimeInput>;
  startdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startdate_lt?: Maybe<DateTimeInput>;
  startdate_lte?: Maybe<DateTimeInput>;
  startdate_gt?: Maybe<DateTimeInput>;
  startdate_gte?: Maybe<DateTimeInput>;
  duedate?: Maybe<DateTimeInput>;
  duedate_not?: Maybe<DateTimeInput>;
  duedate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  duedate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  duedate_lt?: Maybe<DateTimeInput>;
  duedate_lte?: Maybe<DateTimeInput>;
  duedate_gt?: Maybe<DateTimeInput>;
  duedate_gte?: Maybe<DateTimeInput>;
  balance?: Maybe<Int>;
  balance_not?: Maybe<Int>;
  balance_in?: Maybe<Int[] | Int>;
  balance_not_in?: Maybe<Int[] | Int>;
  balance_lt?: Maybe<Int>;
  balance_lte?: Maybe<Int>;
  balance_gt?: Maybe<Int>;
  balance_gte?: Maybe<Int>;
  currency?: Maybe<Currency>;
  currency_not?: Maybe<Currency>;
  currency_in?: Maybe<Currency[] | Currency>;
  currency_not_in?: Maybe<Currency[] | Currency>;
  AND?: Maybe<
    CheckingAccountScalarWhereInput[] | CheckingAccountScalarWhereInput
  >;
  OR?: Maybe<
    CheckingAccountScalarWhereInput[] | CheckingAccountScalarWhereInput
  >;
  NOT?: Maybe<
    CheckingAccountScalarWhereInput[] | CheckingAccountScalarWhereInput
  >;
}

export interface CheckingAccountUpdateManyWithWhereNestedInput {
  where: CheckingAccountScalarWhereInput;
  data: CheckingAccountUpdateManyDataInput;
}

export interface CheckingAccountUpdateManyDataInput {
  bank?: Maybe<String>;
  name?: Maybe<String>;
  startdate?: Maybe<DateTimeInput>;
  duedate?: Maybe<DateTimeInput>;
  balance?: Maybe<Int>;
  currency?: Maybe<Currency>;
}

export interface UserUpdateOneRequiredWithoutAssetsInput {
  create?: Maybe<UserCreateWithoutAssetsInput>;
  update?: Maybe<UserUpdateWithoutAssetsDataInput>;
  upsert?: Maybe<UserUpsertWithoutAssetsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAssetsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertWithoutAssetsInput {
  update: UserUpdateWithoutAssetsDataInput;
  create: UserCreateWithoutAssetsInput;
}

export interface CheckingAccountUpdateInput {
  bank?: Maybe<String>;
  name?: Maybe<String>;
  startdate?: Maybe<DateTimeInput>;
  duedate?: Maybe<DateTimeInput>;
  balance?: Maybe<Int>;
  currency?: Maybe<Currency>;
}

export interface CheckingAccountUpdateManyMutationInput {
  bank?: Maybe<String>;
  name?: Maybe<String>;
  startdate?: Maybe<DateTimeInput>;
  duedate?: Maybe<DateTimeInput>;
  balance?: Maybe<Int>;
  currency?: Maybe<Currency>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  assets?: Maybe<AssetsCreateManyWithoutUserInput>;
}

export interface AssetsCreateManyWithoutUserInput {
  create?: Maybe<AssetsCreateWithoutUserInput[] | AssetsCreateWithoutUserInput>;
  connect?: Maybe<AssetsWhereUniqueInput[] | AssetsWhereUniqueInput>;
}

export interface AssetsCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  checkingAccount?: Maybe<CheckingAccountCreateManyInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  assets?: Maybe<AssetsUpdateManyWithoutUserInput>;
}

export interface AssetsUpdateManyWithoutUserInput {
  create?: Maybe<AssetsCreateWithoutUserInput[] | AssetsCreateWithoutUserInput>;
  delete?: Maybe<AssetsWhereUniqueInput[] | AssetsWhereUniqueInput>;
  connect?: Maybe<AssetsWhereUniqueInput[] | AssetsWhereUniqueInput>;
  set?: Maybe<AssetsWhereUniqueInput[] | AssetsWhereUniqueInput>;
  disconnect?: Maybe<AssetsWhereUniqueInput[] | AssetsWhereUniqueInput>;
  update?: Maybe<
    | AssetsUpdateWithWhereUniqueWithoutUserInput[]
    | AssetsUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | AssetsUpsertWithWhereUniqueWithoutUserInput[]
    | AssetsUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<AssetsScalarWhereInput[] | AssetsScalarWhereInput>;
}

export interface AssetsUpdateWithWhereUniqueWithoutUserInput {
  where: AssetsWhereUniqueInput;
  data: AssetsUpdateWithoutUserDataInput;
}

export interface AssetsUpdateWithoutUserDataInput {
  checkingAccount?: Maybe<CheckingAccountUpdateManyInput>;
}

export interface AssetsUpsertWithWhereUniqueWithoutUserInput {
  where: AssetsWhereUniqueInput;
  update: AssetsUpdateWithoutUserDataInput;
  create: AssetsCreateWithoutUserInput;
}

export interface AssetsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<AssetsScalarWhereInput[] | AssetsScalarWhereInput>;
  OR?: Maybe<AssetsScalarWhereInput[] | AssetsScalarWhereInput>;
  NOT?: Maybe<AssetsScalarWhereInput[] | AssetsScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface AssetsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AssetsWhereInput>;
  AND?: Maybe<AssetsSubscriptionWhereInput[] | AssetsSubscriptionWhereInput>;
  OR?: Maybe<AssetsSubscriptionWhereInput[] | AssetsSubscriptionWhereInput>;
  NOT?: Maybe<AssetsSubscriptionWhereInput[] | AssetsSubscriptionWhereInput>;
}

export interface CheckingAccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CheckingAccountWhereInput>;
  AND?: Maybe<
    | CheckingAccountSubscriptionWhereInput[]
    | CheckingAccountSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CheckingAccountSubscriptionWhereInput[]
    | CheckingAccountSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CheckingAccountSubscriptionWhereInput[]
    | CheckingAccountSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Assets {
  id: ID_Output;
}

export interface AssetsPromise extends Promise<Assets>, Fragmentable {
  id: () => Promise<ID_Output>;
  checkingAccount: <T = FragmentableArray<CheckingAccount>>(args?: {
    where?: CheckingAccountWhereInput;
    orderBy?: CheckingAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface AssetsSubscription
  extends Promise<AsyncIterator<Assets>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  checkingAccount: <
    T = Promise<AsyncIterator<CheckingAccountSubscription>>
  >(args?: {
    where?: CheckingAccountWhereInput;
    orderBy?: CheckingAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
}

export interface AssetsNullablePromise
  extends Promise<Assets | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  checkingAccount: <T = FragmentableArray<CheckingAccount>>(args?: {
    where?: CheckingAccountWhereInput;
    orderBy?: CheckingAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface CheckingAccount {
  id: ID_Output;
  bank: String;
  name?: String;
  startdate: DateTimeOutput;
  duedate: DateTimeOutput;
  balance: Int;
  currency?: Currency;
}

export interface CheckingAccountPromise
  extends Promise<CheckingAccount>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  name: () => Promise<String>;
  startdate: () => Promise<DateTimeOutput>;
  duedate: () => Promise<DateTimeOutput>;
  balance: () => Promise<Int>;
  currency: () => Promise<Currency>;
}

export interface CheckingAccountSubscription
  extends Promise<AsyncIterator<CheckingAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bank: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  startdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  duedate: () => Promise<AsyncIterator<DateTimeOutput>>;
  balance: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<Currency>>;
}

export interface CheckingAccountNullablePromise
  extends Promise<CheckingAccount | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  name: () => Promise<String>;
  startdate: () => Promise<DateTimeOutput>;
  duedate: () => Promise<DateTimeOutput>;
  balance: () => Promise<Int>;
  currency: () => Promise<Currency>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  assets: <T = FragmentableArray<Assets>>(args?: {
    where?: AssetsWhereInput;
    orderBy?: AssetsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  assets: <T = Promise<AsyncIterator<AssetsSubscription>>>(args?: {
    where?: AssetsWhereInput;
    orderBy?: AssetsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  assets: <T = FragmentableArray<Assets>>(args?: {
    where?: AssetsWhereInput;
    orderBy?: AssetsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AssetsConnection {
  pageInfo: PageInfo;
  edges: AssetsEdge[];
}

export interface AssetsConnectionPromise
  extends Promise<AssetsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetsEdge>>() => T;
  aggregate: <T = AggregateAssetsPromise>() => T;
}

export interface AssetsConnectionSubscription
  extends Promise<AsyncIterator<AssetsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetsSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetsEdge {
  node: Assets;
  cursor: String;
}

export interface AssetsEdgePromise extends Promise<AssetsEdge>, Fragmentable {
  node: <T = AssetsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetsEdgeSubscription
  extends Promise<AsyncIterator<AssetsEdge>>,
    Fragmentable {
  node: <T = AssetsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAssets {
  count: Int;
}

export interface AggregateAssetsPromise
  extends Promise<AggregateAssets>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetsSubscription
  extends Promise<AsyncIterator<AggregateAssets>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CheckingAccountConnection {
  pageInfo: PageInfo;
  edges: CheckingAccountEdge[];
}

export interface CheckingAccountConnectionPromise
  extends Promise<CheckingAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CheckingAccountEdge>>() => T;
  aggregate: <T = AggregateCheckingAccountPromise>() => T;
}

export interface CheckingAccountConnectionSubscription
  extends Promise<AsyncIterator<CheckingAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CheckingAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCheckingAccountSubscription>() => T;
}

export interface CheckingAccountEdge {
  node: CheckingAccount;
  cursor: String;
}

export interface CheckingAccountEdgePromise
  extends Promise<CheckingAccountEdge>,
    Fragmentable {
  node: <T = CheckingAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CheckingAccountEdgeSubscription
  extends Promise<AsyncIterator<CheckingAccountEdge>>,
    Fragmentable {
  node: <T = CheckingAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCheckingAccount {
  count: Int;
}

export interface AggregateCheckingAccountPromise
  extends Promise<AggregateCheckingAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCheckingAccountSubscription
  extends Promise<AsyncIterator<AggregateCheckingAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AssetsSubscriptionPayload {
  mutation: MutationType;
  node: Assets;
  updatedFields: String[];
  previousValues: AssetsPreviousValues;
}

export interface AssetsSubscriptionPayloadPromise
  extends Promise<AssetsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetsPreviousValuesPromise>() => T;
}

export interface AssetsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetsPreviousValuesSubscription>() => T;
}

export interface AssetsPreviousValues {
  id: ID_Output;
}

export interface AssetsPreviousValuesPromise
  extends Promise<AssetsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface AssetsPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface CheckingAccountSubscriptionPayload {
  mutation: MutationType;
  node: CheckingAccount;
  updatedFields: String[];
  previousValues: CheckingAccountPreviousValues;
}

export interface CheckingAccountSubscriptionPayloadPromise
  extends Promise<CheckingAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CheckingAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CheckingAccountPreviousValuesPromise>() => T;
}

export interface CheckingAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CheckingAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CheckingAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CheckingAccountPreviousValuesSubscription>() => T;
}

export interface CheckingAccountPreviousValues {
  id: ID_Output;
  bank: String;
  name?: String;
  startdate: DateTimeOutput;
  duedate: DateTimeOutput;
  balance: Int;
  currency?: Currency;
}

export interface CheckingAccountPreviousValuesPromise
  extends Promise<CheckingAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  name: () => Promise<String>;
  startdate: () => Promise<DateTimeOutput>;
  duedate: () => Promise<DateTimeOutput>;
  balance: () => Promise<Int>;
  currency: () => Promise<Currency>;
}

export interface CheckingAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<CheckingAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bank: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  startdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  duedate: () => Promise<AsyncIterator<DateTimeOutput>>;
  balance: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<Currency>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Assets",
    embedded: false
  },
  {
    name: "Currency",
    embedded: false
  },
  {
    name: "CheckingAccount",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
